#include <gtest/gtest.h>

#include <num_islands.h>

class NumIslandsTest : public testing::Test {
  protected:
    Solution s;
};

TEST_F(NumIslandsTest, OneIsland) {
    {
        std::vector<std::vector<char>> v({{'1'}});
        ASSERT_EQ(s.numIslands(v), 1);
    }
    {
        std::vector<std::vector<char>> v({{'1', '1', '1', '1', '0'},
                                          {'1', '1', '0', '1', '0'},
                                          {'1', '1', '0', '0', '0'},
                                          {'0', '0', '0', '0', '0'}});
        ASSERT_EQ(s.numIslands(v), 1);
    }
}

TEST_F(NumIslandsTest, Complex) {
    std::vector<std::vector<char>> v(
        {{'1', '1', '1', '1', '1', '0', '1', '1', '1', '1',
          '1', '1', '1', '1', '1', '0', '1', '0', '1', '1'},
         {'0', '1', '1', '1', '1', '1', '1', '1', '1', '1',
          '1', '1', '1', '0', '1', '1', '1', '1', '1', '0'},
         {'1', '0', '1', '1', '1', '0', '0', '1', '1', '0',
          '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
         {'1', '1', '1', '1', '0', '1', '1', '1', '1', '1',
          '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
         {'1', '0', '0', '1', '1', '1', '1', '1', '1', '1',
          '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
         {'1', '0', '1', '1', '1', '1', '1', '1', '0', '1',
          '1', '1', '0', '1', '1', '1', '0', '1', '1', '1'},
         {'0', '1', '1', '1', '1', '1', '1', '1', '1', '1',
          '1', '1', '0', '1', '1', '0', '1', '1', '1', '1'},
         {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
          '1', '1', '0', '1', '1', '1', '1', '0', '1', '1'},
         {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
          '0', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
         {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
          '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
         {'0', '1', '1', '1', '1', '1', '1', '1', '0', '1',
          '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
         {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
          '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
         {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
          '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
         {'1', '1', '1', '1', '1', '0', '1', '1', '1', '1',
          '1', '1', '1', '0', '1', '1', '1', '1', '1', '1'},
         {'1', '0', '1', '1', '1', '1', '1', '0', '1', '1',
          '1', '0', '1', '1', '1', '1', '0', '1', '1', '1'},
         {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
          '1', '1', '0', '1', '1', '1', '1', '1', '1', '0'},
         {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
          '1', '1', '1', '0', '1', '1', '1', '1', '0', '0'},
         {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
          '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
         {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
          '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
         {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
          '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}});
    ASSERT_EQ(s.numIslands(v), 1);
}
